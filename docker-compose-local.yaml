version: "3.0"
services:
  my_back_end:
    build: .
    volumes:
      - ./:/app
    ports:
      - 8000:8000
    container_name: my_back_end
    image: "my_back_end:${API_VERSION}"
    restart: unless-stopped
    environment:
      - DB_HOST=db_app_new
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - TG_URL=${TG_URL}
      - TG_TOKEN=${TG_TOKEN}
      - CHANNEL_ID=${CHANNEL_ID}
      - ADMIN_CHANNEL_ID=${ADMIN_CHANNEL_ID}
      - DIGISELLER_ID=${DIGISELLER_ID}
      - DIGISELLER_TOKEN=${DIGISELLER_TOKEN}
      - CHECK_CODE_URL=https://api.digiseller.ru/api/purchases/unique-code/{unique_code}?token={token}
    depends_on:
      - db_app_new
    networks:
      - custom

  db_app_new:
    container_name: "db_app_new"
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT_OUT}:5432"
    volumes:
      - local_db:/var/lib/postgresql/data
    networks:
      - custom

  db_app:
    container_name: "db_app"
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER_OLD}
      - POSTGRES_PASSWORD=${DB_PASS_OLD}
      - POSTGRES_DB=${DB_NAME_OLD}
    ports:
      - "5455:5432"
    volumes:
      - alex_pgdata:/var/lib/postgresql/data
    networks:
      - custom

  certbot:
    image: certbot/certbot
    depends_on:
      - nginx
    container_name: certbot
    volumes:
      - ./certbot/newconf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email zimkaa87@gmail.com --agree-tos --no-eff-email -d tamam.games

  nginx:
    image: nginx:latest
    depends_on:
      - my_back_end
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-conf.d:/etc/nginx/conf.d:ro
      - ./certbot/newconf:/etc/letsencrypt/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - custom

  sellerbot:
    build:
      context: ./sellerbot
      dockerfile: Dockerfile
    container_name: sellerbot
    image: "sellerbot:${API_VERSION}"
    restart: unless-stopped
    environment:
      - DB_HOST=db_app_new
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - TG_URL=${TG_URL}
      - TG_TOKEN=${TG_TOKEN}
      - ADMIN_CHANNEL_ID=${ADMIN_CHANNEL_ID}
    networks:
      - custom
    depends_on:
      - db_app_new

networks:
  custom:
    driver: bridge
volumes:
  alex_pgdata:
    external: true
  local_db:
    external: true
